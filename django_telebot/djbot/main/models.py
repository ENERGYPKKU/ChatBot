from django.db import models
from phonenumber_field.modelfields import PhoneNumberField
from phonenumber_field.widgets import PhoneNumberPrefixWidget
import uuid
from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django.contrib.auth import get_user_model
from datetime import datetime


def validate_superusers(value):
    User = get_user_model()
    if User.objects.filter(is_superuser=True).count() > 1:
        raise ValidationError(
            '–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ö–æ—Ç—è —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.')


class User(AbstractUser):
    validators = [validate_superusers]

    def save(self, *args, **kwargs):
        if User.objects.all().count() > 1:
            raise ValidationError(
                '–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ö–æ—Ç—è —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–∞ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.')
        else:
            super(User, self).save(*args, **kwargs)


class UserProfile(models.Model):
    external_id = models.PositiveIntegerField(
        verbose_name="–í–Ω–µ—à–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        unique=True,
    )
    name = models.TextField(
        null=True,
        verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    )
    main_game = models.TextField(
        null=True,
        verbose_name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞",
    )
    steam_nickname = models.TextField(
        null=True,
        verbose_name="–ù–∏–∫–Ω–µ–π–º –≤ Steam",
    )
    about = models.TextField(
        null=True,
        verbose_name="–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
    )

    in_search = models.BooleanField(
        null=True,
        verbose_name="–°—Ç–∞—Ç—É—Å –≤ –ø–æ–∏—Å–∫–µ",
    )

    def __str__(self):
        return f"#{self.external_id} {self.name}"

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏"


class Message(models.Model):
    profile = models.ForeignKey(
        to="main.UserProfile",
        verbose_name="–ü—Ä–æ—Ñ–∏–ª—å",
        on_delete=models.PROTECT,
    )
    text = models.TextField(
        verbose_name="–¢–µ–∫—Å—Ç",
    )
    created_at = models.DateTimeField(
        verbose_name="–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è",
        auto_now_add=True,
    )

    def __str__(self):
        return f"–°–æ–æ–±—â–µ–Ω–∏–µ {self.pk} –æ—Ç {self.profile}"

    class Meta:
        verbose_name = "–°–æ–æ–±—â–µ–Ω–∏–µ"
        verbose_name_plural = "–°–æ–æ–±—â–µ–Ω–∏—è"


class Form(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")
    file = models.FileField(verbose_name="–§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–§–æ—Ä–º–∞ üß•"
        verbose_name_plural = "–§–æ—Ä–º–∞ üß•"


class Contact(models.Model):
    name = models.TextField(
        verbose_name="–ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", max_length=255)
    phone_number = PhoneNumberField(
        verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", help_text="–§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +79123456789")

    def __str__(self):
        return f"{self.name}: {self.phone_number}"

    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç üóíÔ∏è"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç—ã üóíÔ∏è"


button_choices = [
    ("–î–æ–º–æ–π", "–î–æ–º–æ–π"),
    ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ("–í–æ–ø—Ä–æ—Å", "–í–æ–ø—Ä–æ—Å"),
    ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
]


class Button(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)

    name = models.CharField(max_length=255, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
                            help_text="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
    role = models.CharField(choices=button_choices,
                            verbose_name="–†–æ–ª—å –∫–Ω–æ–ø–∫–∏",
                            max_length=50)

    class Meta:
        verbose_name = "–ö–Ω–æ–ø–∫–∞ üîò"
        verbose_name_plural = "–ö–Ω–æ–ø–∫–∏ üîò"


class Specialization(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)

    name = models.CharField(
        max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    study_date = models.CharField(
        max_length=255, verbose_name="–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è")
    study_objects = models.ManyToManyField("StudyObject")
    description = models.CharField(
        max_length=1024, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")

    class Meta:
        verbose_name = "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å üåê"
        verbose_name_plural = "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üåê"


class StudyObject(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)

    name = models.CharField(
        max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    code = models.CharField(
        max_length=255, verbose_name="–ö–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞", blank=True)

    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üåê"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üåê"


class UserMessage(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)

    date_timestamp = models.BigIntegerField(
        editable=False, verbose_name="–î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ timestamp")
    username = models.CharField(
        max_length=255, verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ @Test123")
    content = models.CharField(
        max_length=5000, verbose_name="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    date = models.CharField(
        max_length=1000, verbose_name="–î–∞—Ç–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –≤–∏–¥–µ", editable=False, blank=True, null=True)

    def save(self, *args, **kwargs):
        self.date = datetime.fromtimestamp(self.date_timestamp)
        super(UserMessage, self).save(*args, **kwargs)

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìî"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è üìî"


class BotConfiguration(models.Model):
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False)

    bot_token = models.CharField(
        max_length=1000,
        verbose_name="–¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞")
    admin_chat_id = models.TextField(max_length=50,
                                     verbose_name="Id –∞–¥–º–∏–Ω —á–∞—Ç–∞ –¥–ª—è –±–æ—Ç–∞",
                                     help_text="–ß–∞—Ç –±–æ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç"
                                     )
    is_in_use = models.BooleanField(
        verbose_name="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ?")

    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ü§ñ"
        verbose_name_plural = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ ü§ñ"
